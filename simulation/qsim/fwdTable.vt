// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2014 09:17:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    camTestBench
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module camTestBench_vlg_sample_tst(
	Clock,
	Reset,
	sampler_tx
);
input  Clock;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module camTestBench_vlg_check_tst (
	data_out,
	read_state,
	start_out,
	test_good,
	sampler_rx
);
input [2:0] data_out;
input  read_state;
input  start_out;
input  test_good;
input sampler_rx;

reg [2:0] data_out_expected;
reg  read_state_expected;
reg  start_out_expected;
reg  test_good_expected;

reg [2:0] data_out_prev;
reg  read_state_prev;
reg  start_out_prev;
reg  test_good_prev;

reg [2:0] data_out_expected_prev;
reg  read_state_expected_prev;
reg  start_out_expected_prev;
reg  test_good_expected_prev;

reg [2:0] last_data_out_exp;
reg  last_read_state_exp;
reg  last_start_out_exp;
reg  last_test_good_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	read_state_prev = read_state;
	start_out_prev = start_out;
	test_good_prev = test_good;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	read_state_expected_prev = read_state_expected;
	start_out_expected_prev = start_out_expected;
	test_good_expected_prev = test_good_expected;
end


// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected start_out
initial
begin
	start_out_expected = 1'bX;
end 

// expected test_good
initial
begin
	test_good_expected = 1'bX;
end 

// expected read_state
initial
begin
	read_state_expected = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or read_state_expected or read_state or start_out_expected or start_out or test_good_expected or test_good)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected read_state = %b | expected start_out = %b | expected test_good = %b | ",data_out_expected_prev,read_state_expected_prev,start_out_expected_prev,test_good_expected_prev);
	$display("| real data_out = %b | real read_state = %b | real start_out = %b | real test_good = %b | ",data_out_prev,read_state_prev,start_out_prev,test_good_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( read_state_expected_prev !== 1'bx ) && ( read_state_prev !== read_state_expected_prev )
		&& ((read_state_expected_prev !== last_read_state_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_state :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_state_expected_prev);
		$display ("     Real value = %b", read_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_state_exp = read_state_expected_prev;
	end
	if (
		( start_out_expected_prev !== 1'bx ) && ( start_out_prev !== start_out_expected_prev )
		&& ((start_out_expected_prev !== last_start_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_out_expected_prev);
		$display ("     Real value = %b", start_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_start_out_exp = start_out_expected_prev;
	end
	if (
		( test_good_expected_prev !== 1'bx ) && ( test_good_prev !== test_good_expected_prev )
		&& ((test_good_expected_prev !== last_test_good_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_good :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_good_expected_prev);
		$display ("     Real value = %b", test_good_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test_good_exp = test_good_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module camTestBench_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Reset;
// wires                                               
wire [2:0] data_out;
wire read_state;
wire start_out;
wire test_good;

wire sampler;                             

// assign statements (if any)                          
camTestBench i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.data_out(data_out),
	.read_state(read_state),
	.Reset(Reset),
	.start_out(start_out),
	.test_good(test_good)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #20000 1'b0;
end 

camTestBench_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Reset(Reset),
	.sampler_tx(sampler)
);

camTestBench_vlg_check_tst tb_out(
	.data_out(data_out),
	.read_state(read_state),
	.start_out(start_out),
	.test_good(test_good),
	.sampler_rx(sampler)
);
endmodule

