LIBRARY IEEE, STD;
USE IEEE.std_logic_1164.all;
--USE IEEE.std_logic_components.all;
USE IEEE.std_logic_arith.all;
USE IEEE.std_logic_misc.all;
USE IEEE.std_logic_unsigned.all;


ENTITY Table IS 
	PORT (clk				: IN	STD_LOGIC;
			reset			: IN	STD_LOGIC;
			src_port_data	: IN	STD_LOGIC_VECTOR(2 downto 0);
			src_mac_data	: IN 	STD_LOGIC_VECTOR(47 downto 0);
			dst_mac_data	: IN	STD_LOGIC_VECTOR(47 downto 0);
			fwd_data_valid	: IN	STD_LOGIC;

			-- output
			tbl_ready		: OUT 	STD_LOGIC;
			tbl_data_valid	: OUT	STD_LOGIC;
			dst_port_data	: OUT	STD_LOGIC_VECTOR(2 downto 0)
			);
END Table;


architecture fsm of Table is
	type state_type is
	(s0, s1, s2, s3, s4);
	signal state_reg, state_next: state_type;
begin


process (clk, reset) -- state register definition
begin
	if (reset = '1')then
		state_reg <= s0;
	elsif (clk'event and clk = '1') then
		state_reg <= state_next;
	end if;
end process;




PROCESS(state_reg)
BEGIN

case state_reg is
	when s0 =>
		if(fwd_data_valid) then
			state_next <= s1;
		else
			state_next <= s0;
		end if;
	when s1 =>
		state_next <= s2;
	when s2 =>
		state_next <= s3;
	when s3 =>
		state_next <= s4;
	when s4 =>
		state_next <= s0; -- startover
	end case;
end process;




process (state_reg)
	begin
		case state_reg is
			when s0 =>
				if(fwd_data_valid) then
					-- latch values
				end if;
			when s1 =>
				-- take dst_mac_data and pass to CAM

				-- resave src_mac_data
				-- resave src_port_data
			when s2 =>
				tbl_data_valid <= '1';
				-- return dst_port_data to fowarding
				read_SA = '1';
				-- src_mac_data lookup in CAM
				-- resave src_port_data
			when s3 =>
				-- compare src_port_data in CAM
			when s4 =>
				write_SP <= '1';
				-- write updated version of src_port_data into CAM
				tbl_ready <= '1';
			end case;
	end process;

end fsm;

